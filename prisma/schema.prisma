generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  replies       Reply[] // Fixed the name of this field

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Discussion {
  id        Int       @id @default(autoincrement())
  verse     String
  date      DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[] // Comments associated with this discussion

  @@map("discussions")
}

model Comment {
  id           Int        @id @default(autoincrement())
  text         String
  version      String
  reactions    String[]
  reports      String[]
  upvotes      String[]
  downvotes    String[]
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  discussionId Int
  replies      Reply[] // Replies associated with this comment
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("comments")
}

model Reply {
  id              Int      @id @default(autoincrement())
  text            String
  version         String
  parentComment   Comment  @relation(fields: [parentCommentId], references: [id])
  parentCommentId Int
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("replies")
}
